{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ad8b775.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (   \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"#\">{props.aboutText}</a>\r\n            </li>             */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text'\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n    const handleDownClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n\r\n    const clrText = ()=>{\r\n        let newText = ('');\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(\" \");\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'black':'white'},{color: props.mode==='light'?'black':'white'}}>\r\n           <h1>{props.heading}</h1>\r\n            <div className=\"w-100 p-3\">\r\n                <textarea className=\"w-100 p-3\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'dark':'light'}} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={clrText}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Handle Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'black':'white'},{color: props.mode==='light'?'black':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className=\"alert alert-$(props.alert.type) alert-dismissible fade show p-3 mb-2 bg-success text-white\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React,{useState} from 'react';\nimport About from './components/About';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n// let name = \"Kshitiz\"\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n  }\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#14304c';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Light mode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Dark mode\"\n    }\n  }\n  return (\n    <>\n      {/* <nav>\n        <li>Home</li>\n        <li>About</li>\n        <li>Contact</li>\n      </nav>\n      <div className=\"container\">\n        <h1>Hello {name}</h1>\n        <p>\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Exercitationem nemo nobis nihil soluta. Sit sunt repellat, sed incidunt facilis doloribus neque consequuntur, blanditiis molestias obcaecati aperiam dolores culpa nemo laudantium excepturi, debitis minima distinctio!\n        </p>\n      </div> */}\n      {/* <About/> */}\n      {/* <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About\"/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          <Switch>\n              <Route exact path=\"/about\">\n                <About/>\n              </Route>\n              <Route exact path=\"/\">\n                <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n              </Route>\n            </Switch>\n          </div>\n     </Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About\"/>\n      <Alert alert={alert}/>\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}